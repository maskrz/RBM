/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rbm;

import algorithm.RBM;
import algorithm.RBMRepository;
import algorithm.RBMtrain;
import algorithm.SelectionHelperType;
import algorithm.choice.QuestionChoiceStrategy;
import algorithm.choice.QuestionChoiceStrategyType;
import algorithm.selection.SelectionStrategy;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import matrices.operations.CalculatedMatrixFactory;
import org.jblas.FloatMatrix;
import structures.FeaturesMatrix;

/**
 *
 * @author Skrzypek
 */
public class MainFrame extends javax.swing.JFrame {

    private int hiddenUnits;
    private int epochs;
    private int minibatchSize;
    private float alpha;
    private String aName;
    private String bName;
    private String wName;
    private String dataSetname;
    private int questions;
    private int movieId;
    FloatMatrix featuresMatrix = null;
    FloatMatrix a = null;
    FloatMatrix b = null;
    FloatMatrix w = null;
    RBMtrain rbmTrain;
    RBM rbm;
    CalculatedMatrixFactory cmf;
    private String dataSetRBMname;
    private String rbmSetName;
    private boolean filterMovies;
    private SelectionStrategy selectionStrategy;
    private QuestionChoiceStrategy choiceStrategy;
    private boolean isRunning;

    public MainFrame() {
        initComponents();
        zeroLabels();
        fillDataSetsComboBox();
        fillRBMcomboBox();
        fillConfigurationComboBox();
        buttonGroup1.add(onlyEntropy);
        buttonGroup1.add(multipleEntropy);
        buttonGroup1.add(addEntropy);
        buttonGroup1.add(noEntropy);
        buttonGroup1.add(ranking);
        buttonGroup1.add(percentage_ranking);
        buttonGroup1.add(boltzmann_entropy);
        buttonGroup1.add(random);
        buttonGroup2.add(randomQuestion);
        buttonGroup2.add(selectBest);
        buttonGroup2.add(randomBest);
        isRunning = false;
        cmf = new CalculatedMatrixFactory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        hiddenTextField = new javax.swing.JTextField();
        epochsTextBox = new javax.swing.JTextField();
        minibatchTextField = new javax.swing.JTextField();
        alphaTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        dataSetsComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        aNameTextField = new javax.swing.JTextField();
        bNameTextField = new javax.swing.JTextField();
        wNameTextField = new javax.swing.JTextField();
        teachRBM = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        requestError = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        progressInfo = new javax.swing.JLabel();
        otherInfo = new javax.swing.JLabel();
        errorInfo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        movieIdTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        dataSetsComboBoxRBM = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        RBMcomboBox = new javax.swing.JComboBox();
        recognizaMovieButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        questionsAmount = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        filterMovieCheckBox = new javax.swing.JCheckBox();
        multipleEntropy = new javax.swing.JRadioButton();
        addEntropy = new javax.swing.JRadioButton();
        onlyEntropy = new javax.swing.JRadioButton();
        noEntropy = new javax.swing.JRadioButton();
        ConfigurationComboBox = new javax.swing.JComboBox();
        CofigurationButton = new javax.swing.JButton();
        ranking = new javax.swing.JRadioButton();
        percentage_ranking = new javax.swing.JRadioButton();
        boltzmann_entropy = new javax.swing.JRadioButton();
        jLabel20 = new javax.swing.JLabel();
        selectBest = new javax.swing.JRadioButton();
        randomQuestion = new javax.swing.JRadioButton();
        randomBest = new javax.swing.JRadioButton();
        random = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Naucz RBM:");

        jLabel2.setText("Jednostki ukryte:");

        jLabel3.setText("Epok:");

        jLabel4.setText("Minibatch:");

        jLabel5.setText("Alfa:");

        hiddenTextField.setText("1000");

        epochsTextBox.setText("100");

        minibatchTextField.setText("10");

        alphaTextField.setText("0.01");

        jLabel6.setText("Zestaw danych:");

        jLabel7.setText("Nazwy wyjsciowe:");

        jLabel8.setText("a:");

        jLabel9.setText("b:");

        jLabel10.setText("w:");

        aNameTextField.setText("a.txt");

        bNameTextField.setText("b.txt");

        wNameTextField.setText("w.txt");

        teachRBM.setText("Start");
        teachRBM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teachRBMActionPerformed(evt);
            }
        });

        jLabel11.setText("Komunikaty:");

        jLabel12.setText("Postep:");

        jLabel13.setText("Inne:");

        requestError.setText("Oblicz blad rekonstrukcji");
        requestError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestErrorActionPerformed(evt);
            }
        });

        jLabel14.setText("Blad:");

        progressInfo.setText("jLabel15");

        otherInfo.setText("jLabel16");

        errorInfo.setText("jLabel15");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel15.setText("Odgadnij film:");

        jLabel16.setText("Nr filmu:");

        movieIdTextField.setText("1");

        jLabel17.setText("Zestaw danych:");

        jLabel18.setText("RBM:");

        recognizaMovieButton.setText("Odgadnij");
        recognizaMovieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recognizaMovieButtonActionPerformed(evt);
            }
        });

        jLabel19.setText("Liczba pytan:");

        questionsAmount.setText("50");

        jButton1.setText("Licz wszystkie");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        filterMovieCheckBox.setSelected(true);
        filterMovieCheckBox.setText("Filtrowanie filmow");

        multipleEntropy.setText("Mnozenie");

        addEntropy.setText("Dodawanie");

        onlyEntropy.setText("Sama entropia");

        noEntropy.setSelected(true);
        noEntropy.setText("Nie uwzgledniaj");

        CofigurationButton.setText("Konfiguracja");
        CofigurationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CofigurationButtonActionPerformed(evt);
            }
        });

        ranking.setText("Ranking");

        percentage_ranking.setText("Ranking Procentowy");

        boltzmann_entropy.setText("Entropia-boltzmann");

        jLabel20.setText("Wybor pytania:");

        selectBest.setSelected(true);
        selectBest.setText("Najlepsze");

        randomQuestion.setText("Losowanie");

        randomBest.setText("Losuj z najlepszych");

        random.setText("Losowo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(hiddenTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                                .addComponent(epochsTextBox)
                                .addComponent(minibatchTextField)
                                .addComponent(alphaTextField)
                                .addComponent(dataSetsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(wNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                .addComponent(bNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(aNameTextField, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addComponent(teachRBM, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestError, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(otherInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(progressInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recognizaMovieButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel19))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(movieIdTextField)
                            .addComponent(dataSetsComboBoxRBM, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RBMcomboBox, 0, 70, Short.MAX_VALUE)
                            .addComponent(questionsAmount)))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterMovieCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ConfigurationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CofigurationButton))
                    .addComponent(ranking)
                    .addComponent(percentage_ranking)
                    .addComponent(boltzmann_entropy)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(multipleEntropy)
                            .addComponent(addEntropy)
                            .addComponent(onlyEntropy)
                            .addComponent(noEntropy))
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(randomBest)
                            .addComponent(randomQuestion)
                            .addComponent(selectBest)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(random))
                .addContainerGap(192, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(hiddenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(epochsTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(minibatchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(alphaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(dataSetsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(aNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(bNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(wNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(teachRBM, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(requestError, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(errorInfo))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(progressInfo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(otherInfo)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(movieIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(dataSetsComboBoxRBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(RBMcomboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(questionsAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(recognizaMovieButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filterMovieCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(multipleEntropy)
                                    .addComponent(jLabel20))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addEntropy)
                                    .addComponent(selectBest))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(onlyEntropy)
                                    .addComponent(randomQuestion))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(noEntropy)
                                    .addComponent(randomBest))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ranking)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(percentage_ranking)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boltzmann_entropy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(random)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConfigurationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CofigurationButton))
                        .addGap(43, 43, 43))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void teachRBMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teachRBMActionPerformed
//        prepareTestData();
        zeroLabels();
        readTeachParameters();
        readFeaturesMatrix(dataSetname);
        this.rbmTrain = new RBMtrain(featuresMatrix, featuresMatrix.copy(featuresMatrix), hiddenUnits, epochs, minibatchSize, alpha, this);
        rbmTrain.setDataSetName(dataSetname);
        rbmTrain.start();
    }//GEN-LAST:event_teachRBMActionPerformed

    private void requestErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestErrorActionPerformed
        if (rbmTrain != null) {
            rbmTrain.requestErrorCalculation();
        }
    }//GEN-LAST:event_requestErrorActionPerformed

    private void recognizaMovieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recognizaMovieButtonActionPerformed
        readRBMParameters();
        readFeaturesMatrix(dataSetRBMname);
        RBMRepository repository = new RBMRepository(a, b, w, featuresMatrix, questions, 1f);
        this.rbm = new RBM(repository, this);
        rbm.recognizeMovie(movieId, filterMovies, selectionStrategy, choiceStrategy, false);
    }//GEN-LAST:event_recognizaMovieButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        readRBMParameters();
        readFeaturesMatrix(dataSetRBMname);
        RBMRepository repository = new RBMRepository(a, b, w, featuresMatrix, questions, 1f);
        this.rbm = new RBM(repository, this);
        rbm.executeForAll(filterMovies, selectionStrategy, choiceStrategy, true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CofigurationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CofigurationButtonActionPerformed
        runConfiguration();
    }//GEN-LAST:event_CofigurationButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CofigurationButton;
    private javax.swing.JComboBox ConfigurationComboBox;
    private javax.swing.JComboBox RBMcomboBox;
    private javax.swing.JTextField aNameTextField;
    private javax.swing.JRadioButton addEntropy;
    private javax.swing.JTextField alphaTextField;
    private javax.swing.JTextField bNameTextField;
    private javax.swing.JRadioButton boltzmann_entropy;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox dataSetsComboBox;
    private javax.swing.JComboBox dataSetsComboBoxRBM;
    private javax.swing.JTextField epochsTextBox;
    private javax.swing.JLabel errorInfo;
    private javax.swing.JCheckBox filterMovieCheckBox;
    private javax.swing.JTextField hiddenTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField minibatchTextField;
    private javax.swing.JTextField movieIdTextField;
    private javax.swing.JRadioButton multipleEntropy;
    private javax.swing.JRadioButton noEntropy;
    private javax.swing.JRadioButton onlyEntropy;
    private javax.swing.JLabel otherInfo;
    private javax.swing.JRadioButton percentage_ranking;
    private javax.swing.JLabel progressInfo;
    private javax.swing.JTextField questionsAmount;
    private javax.swing.JRadioButton random;
    private javax.swing.JRadioButton randomBest;
    private javax.swing.JRadioButton randomQuestion;
    private javax.swing.JRadioButton ranking;
    private javax.swing.JButton recognizaMovieButton;
    private javax.swing.JButton requestError;
    private javax.swing.JRadioButton selectBest;
    private javax.swing.JButton teachRBM;
    private javax.swing.JTextField wNameTextField;
    // End of variables declaration//GEN-END:variables

    private void fillDataSetsComboBox() {
        File folder = new File(".");
        File[] listOfFiles = folder.listFiles();
        for (File file : listOfFiles) {
            if (file.getName().endsWith("ser")) {
                dataSetsComboBox.addItem(file.getName());
                dataSetsComboBoxRBM.addItem(file.getName());
            }
        }
    }

    private void fillRBMcomboBox() {
        String path = new File("").getAbsolutePath() + "\\trained\\";
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();
        for (File file : listOfFiles) {
            RBMcomboBox.addItem(file.getName());
        }
    }

    private void readTeachParameters() {
        hiddenUnits = Integer.valueOf(hiddenTextField.getText());
        epochs = Integer.valueOf(epochsTextBox.getText());
        minibatchSize = Integer.valueOf(minibatchTextField.getText());
        alpha = Float.valueOf(alphaTextField.getText());
        aName = aNameTextField.getText();
        bName = bNameTextField.getText();
        wName = wNameTextField.getText();
        dataSetname = dataSetsComboBox.getSelectedItem().toString();
    }

    private void generateUncertainSet() {
        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("peopleGroups.ser"));
            FeaturesMatrix fm = (FeaturesMatrix) ois.readObject();
            FloatMatrix floatMatrix = new FloatMatrix(toFloat(fm.getFeatures()));
            for (int i = 0; i < floatMatrix.columns; i++) {
                for (int j = 0; j < floatMatrix.rows; j++) {
                    double r = Math.random();
                    if (r > 0.5) {
                        floatMatrix.put(i, j, -1);
                    }
                }
            }
            fm.setFeatures(floatMatrix.toIntArray2());
            fm.serialize();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void readFeaturesMatrix(String dataSet) {
        if (featuresMatrix == null) {
            try {
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(dataSet));
                featuresMatrix = new FloatMatrix(toFloat(((FeaturesMatrix) ois.readObject()).getFeatures()));
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }

    private float[][] toFloat(int[][] features) {
        float[][] result = new float[features.length][];
        for (int i = 0; i < features.length; i++) {
            result[i] = copyF(features[i]);
        }
        return result;
    }

    private float[] copyF(int[] features) {
        float[] result = new float[features.length];
        for (int i = 0; i < features.length; i++) {
            result[i] = features[i];
        }
        return result;
    }

    private void zeroLabels() {
        errorInfo.setText("");
        progressInfo.setText("");
        otherInfo.setText("");
    }

    public void setProgress(String message) {
        progressInfo.setText(message);
    }

    public void setOther(String message) {
        otherInfo.setText(message);
    }

    public void setError(String message) {
        errorInfo.setText(message);
    }

    public void saveAll() {
        String path = createFolder();
        saveFile(path, "info.txt", rbmTrain.getInfo());
        saveMatrix(path, aName, rbmTrain.getProbabilities());
        saveMatrix(path, bName, rbmTrain.getHidden());
        saveMatrix(path, wName, rbmTrain.getWeights());
        fillRBMcomboBox();
    }

    private String createFolder() {
        String folder = createFolderName();
        String path = new File("").getAbsolutePath() + "\\trained\\" + folder;
        File f = new File(path);
        f.mkdirs();
        return path;
    }

    private void saveFile(String path, String name, String text) {
        try {
            FileOutputStream fos = null;

            File f = new File(path + "\\" + name);
            fos = new FileOutputStream(f);
            fos.write(text.getBytes());
            fos.close();

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void saveMatrix(String path, String name, FloatMatrix matrix) {
        try {
            FileOutputStream fos = null;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < matrix.rows; i++) {
                for (int j = 0; j < matrix.columns; j++) {
                    sb.append(matrix.get(i, j));
                    sb.append("; ");
                }
                sb.append(System.getProperty("line.separator"));
            }
            File f = new File(path + "\\" + name);
            fos = new FileOutputStream(f);
            fos.write(sb.toString().getBytes());
            fos.close();

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private String createFolderName() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        Date date = new Date();
        String name = hiddenUnits + "-" + epochs + "-" + minibatchSize + "_" + dateFormat.format(date);
        return name;
    }

    private void readRBMParameters() {
        questions = Integer.valueOf(questionsAmount.getText());
        movieId = Integer.valueOf(movieIdTextField.getText());
        dataSetRBMname = dataSetsComboBoxRBM.getSelectedItem().toString();
        rbmSetName = RBMcomboBox.getSelectedItem().toString();
        filterMovies = filterMovieCheckBox.isSelected();
        if (onlyEntropy.isSelected()) {
            selectionStrategy = SelectionHelperType.ONLY_ENTROPY.newInstance();
        }
        if (addEntropy.isSelected()) {
            selectionStrategy = SelectionHelperType.ADD.newInstance();
        }
        if (multipleEntropy.isSelected()) {
            selectionStrategy = SelectionHelperType.MULTIPLE.newInstance();
        }
        if (noEntropy.isSelected()) {
            selectionStrategy = SelectionHelperType.NONE.newInstance();
        }
        if (ranking.isSelected()) {
            selectionStrategy = SelectionHelperType.RANKING.newInstance();
        }
        if (percentage_ranking.isSelected()) {
            selectionStrategy = SelectionHelperType.PERCENTAGE_RANKING.newInstance();
        }
        if (boltzmann_entropy.isSelected()) {
            selectionStrategy = SelectionHelperType.BOLTZMANN_ENTROPY.newInstance();
        }
        if (random.isSelected()) {
            selectionStrategy = SelectionHelperType.RANDOM.newInstance();
        }
        if (selectBest.isSelected()) {
            choiceStrategy = QuestionChoiceStrategyType.SELECT_BEST.newInstance();
        }
        if (randomQuestion.isSelected()) {
            choiceStrategy = QuestionChoiceStrategyType.RANDOM_FROM_PROBABILITIES.newInstance();
        }
        if(randomBest.isSelected()) {
            choiceStrategy = QuestionChoiceStrategyType.RANDOM_BEST.newInstance();
        }
        initializeRBM(rbmSetName);

    }

    private void readMatrix(FloatMatrix matrix, File file) {
        try {
            Scanner sc = new Scanner(file);
            int lineCounter = 0;
            String line = "";
            while (sc.hasNextLine()) {
                line = sc.nextLine();
                if (line.length() > 0) {
                    String[] columns = line.split(" ");
                    for (int i = 0; i < columns.length; i++) {
                        String value = columns[i].replace(";", "");
                        matrix.put(lineCounter, i, Float.valueOf(value));
                    }
                }

                lineCounter++;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private int[] getDimensions(File file) {
        int rows = 0;
        int columns = 0;
        int[] result = new int[2];
        try {
            Scanner sc = new Scanner(file);
            String line = "";
            while (sc.hasNextLine() && (line = sc.nextLine()).length() > 0) {
                rows++;
            }
            System.out.println(rows);
            columns = line.split(" ").length;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        result[0] = rows;
        result[1] = columns;
        return result;
    }

    private void initializeRBM(String rbmSetName) {
        String path = new File("").getAbsolutePath() + "\\trained\\" + rbmSetName;
        File aFile = new File(path + "\\a.txt");
        File bFile = new File(path + "\\b.txt");
        File wFile = new File(path + "\\w.txt");
//        if (a == null) {
        int[] dimensions = getDimensions(aFile);
        a = new FloatMatrix(dimensions[0], dimensions[1]);
        readMatrix(a, aFile);
        dimensions = getDimensions(bFile);
        b = new FloatMatrix(dimensions[0], dimensions[1]);
        readMatrix(b, bFile);
        dimensions = getDimensions(wFile);
        w = new FloatMatrix(dimensions[0], dimensions[1]);
        readMatrix(w, wFile);
//        }
        File folder = new File(path);
        System.out.println(folder.getName());
    }

    private void fillConfigurationComboBox() {
        String path = new File("").getAbsolutePath() + "\\run_configuration\\";
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();
        for (File file : listOfFiles) {
            ConfigurationComboBox.addItem(file.getName());
        }
    }

    private void runConfiguration() {
        String configurationName = ConfigurationComboBox.getSelectedItem().toString();
        String path = new File("").getAbsolutePath() + "\\run_configuration\\" + configurationName;
        File f = new File(path);
        try {
            Scanner sc = new Scanner(f);
            int runs = Integer.valueOf(sc.nextLine());
            for (int i = 0; i < runs; i++) {
                String serializedM = sc.nextLine();
                String rbmName = sc.nextLine();
                questions = Integer.valueOf(sc.nextLine());
                filterMovies = Boolean.valueOf(sc.nextLine());
                String selectionHelper = sc.nextLine();
                if ("none".equals(selectionHelper)) {
                    selectionStrategy = SelectionHelperType.NONE.newInstance();
                }
                if ("add".equals(selectionHelper)) {
                    selectionStrategy = SelectionHelperType.ADD.newInstance();
                }
                if ("multiply".equals(selectionHelper)) {
                    selectionStrategy = SelectionHelperType.MULTIPLE.newInstance();
                }
                if ("only".equals(selectionHelper)) {
                    selectionStrategy = SelectionHelperType.ONLY_ENTROPY.newInstance();
                }
                if ("ranking".equals(selectionHelper)) {
                    selectionStrategy = SelectionHelperType.RANKING.newInstance();
                }
                if ("percentage_ranking".equals(selectionHelper)) {
                    selectionStrategy = SelectionHelperType.PERCENTAGE_RANKING.newInstance();
                }
                if ("boltzmann_entropy".equals(selectionHelper)) {
                    selectionStrategy = SelectionHelperType.BOLTZMANN_ENTROPY.newInstance();
                }
                if ("random".equals(selectionHelper)) {
                    selectionStrategy = SelectionHelperType.RANDOM.newInstance();
                }
                String choiceStrategyString = sc.nextLine();
                if ("select_best".equals(choiceStrategyString)) {
                    choiceStrategy = QuestionChoiceStrategyType.SELECT_BEST.newInstance();
                }
                if ("random".equals(choiceStrategyString)) {
                    choiceStrategy = QuestionChoiceStrategyType.RANDOM_FROM_PROBABILITIES.newInstance();
                }
                if ("random_best".equals(choiceStrategyString)) {
                    choiceStrategy = QuestionChoiceStrategyType.RANDOM_BEST.newInstance();
                }
                float certainty = Float.valueOf(sc.nextLine());
                readFeaturesMatrix(serializedM);
                initializeRBM(rbmName);

                RBMRepository repository = new RBMRepository(a, b, w, featuresMatrix, questions, certainty);
                this.rbm = new RBM(repository, this);

                //TODO
                rbm.setFilterMovies(filterMovies);
                rbm.setSelectionStrategy(selectionStrategy);
                rbm.setQuestionChoiceStrategy(choiceStrategy);
                rbm.start();
                rbm.join();
                featuresMatrix = null;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void prepareTestData() {
        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("peopleGroups.ser"));
            FeaturesMatrix fm = (FeaturesMatrix) ois.readObject();
            float[][] testData
                    = {{0f, 0f, 1f, 0f, 0f},
                    {0f, 1f, 0f, 1f, 0f},
                    {0f, 0f, 0f, 0f, 1f},
                    {1f, 1f, 0f, 1f, 1f},
                    {0f, 1f, 1f, 1f, 0f},
                    {1f, 0f, 0f, 1f, 1f}};
            FloatMatrix floatMatrix = new FloatMatrix(testData);
            fm.setFeatures(floatMatrix.toIntArray2());
            fm.serialize();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
